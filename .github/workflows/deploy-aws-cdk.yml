# acknowledging extended from OSS https://github.com/FAIMS/FAIMS3
name: CDK Deploy ReefGuide to AWS
on:
  # Manually run deploy
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform'
        required: true
        default: 'diff'
        type: choice
        options:
          - deploy
          - diff
      environment:
        description: 'Which GitHub environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod
permissions:
  id-token: write
  contents: read
jobs:
  cdk-deploy:
    # This means the workflow can only run from the selected environments branches
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Display Workflow Inputs
        run: |
          echo "========================================="
          echo "üöÄ CDK Deploy Workflow Started"
          echo "========================================="
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch/Ref: ${{ github.ref }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "========================================="

      - name: Checkout main code
        uses: actions/checkout@v4

      - name: Display Repository Info
        run: |
          echo "üìÅ Main repository cloned"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Working directory contents:"
          ls -la

      - name: Checkout config code
        uses: actions/checkout@v4
        with:
          # e.g. org/repo-name
          repository: ${{ vars.CDK_CONFIG_REPO_PATH }}
          # The OAuth token providing access
          token: ${{ secrets.CDK_CONFIG_REPO_TOKEN }}
          # Where to clone the repo to
          path: packages/infra/config_repo

      - name: Display Config Repository Info
        run: |
          echo "üìÅ Config repository checked out"
          echo "Config repo path: ${{ vars.CDK_CONFIG_REPO_PATH }}"
          echo "Config directory contents:"
          ls -la packages/infra/config_repo/ || echo "Config directory not found"

      - name: Display CDK Configuration Variables
        run: |
          echo "========================================="
          echo "üîß CDK Configuration Variables"
          echo "========================================="
          echo "CDK Deploy Namespace: ${{ vars.CDK_DEPLOY_NAMESPACE }}"
          echo "CDK Deploy Environment: ${{ vars.CDK_DEPLOY_ENVIRONMENT }}"
          echo "CDK Deploy Branch: ${{ vars.CDK_DEPLOY_BRANCH }}"
          echo "CDK Config Repo Path: ${{ vars.CDK_CONFIG_REPO_PATH }}"
          echo "CDK Deploy GA Role ARN: ${{ vars.CDK_DEPLOY_GA_ROLE_ARN }}"
          echo "========================================="

      - name: Run CDK Config Setup Action
        uses: ./.github/actions/config
        id: cdk-config-setup
        with:
          namespace: ${{ vars.CDK_DEPLOY_NAMESPACE }}
          environment: ${{ vars.CDK_DEPLOY_ENVIRONMENT }}
          branch: ${{ vars.CDK_DEPLOY_BRANCH }}
          config-repo-path: config_repo

      - name: Display AWS Target Details
        run: |
          echo "========================================="
          echo "‚òÅÔ∏è  AWS Deployment Target"
          echo "========================================="
          echo "AWS Region: ${{ steps.cdk-config-setup.outputs.aws-region }}"
          echo "AWS Account: ${{ steps.cdk-config-setup.outputs.aws-account }}"
          echo "Role to Assume: ${{ vars.CDK_DEPLOY_GA_ROLE_ARN }}"
          echo "========================================="

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.CDK_DEPLOY_GA_ROLE_ARN }}
          aws-region: ${{ steps.cdk-config-setup.outputs.aws-region }}

      - name: Verify AWS Configuration
        run: |
          echo "üîê Verifying AWS credentials..."
          aws sts get-caller-identity
          echo "Current AWS region: $(aws configure get region)"

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Display AWS CLI Version
        run: |
          echo "üì¶ AWS CLI installed:"
          aws --version

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Display Node.js Version
        run: |
          echo "üì¶ Node.js setup complete:"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Display pnpm Version
        run: |
          echo "üì¶ pnpm installed:"
          echo "pnpm version: $(pnpm --version)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          echo "üìÅ pnpm store path: $(pnpm store path --silent)"

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "üì¶ Installing project dependencies..."
          pnpm install
          echo "‚úÖ Dependencies installed successfully"

      - name: Build the infra package
        run: |
          echo "üèóÔ∏è  Building infrastructure package..."
          pnpm exec turbo run build --filter=@reefguide/infra
          echo "‚úÖ Infrastructure package built successfully"

      - name: Upload web-api and capacity manager Sourcemaps to BugSink
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          if [ -z "$SENTRY_URL" ] || [ -z "$SENTRY_AUTH_TOKEN" ]; then
            echo "‚ö†Ô∏è  Skipping sourcemap upload - SENTRY_URL or SENTRY_AUTH_TOKEN not configured"
            echo "   To enable sourcemap uploads, add these secrets to your repository:"
            echo "   - SENTRY_URL (your BugSink deployment URL)"
            echo "   - SENTRY_AUTH_TOKEN (auth token from BugSink admin panel)"
            exit 0
          fi
          echo "üó∫Ô∏è  Uploading sourcemaps to BugSink..."
          echo "BugSink URL: $SENTRY_URL"
          pnpm exec turbo sourcemaps --force
          echo "‚úÖ Sourcemaps uploaded successfully"

      - name: Display Final Configuration Before CDK
        working-directory: packages/infra
        run: |
          echo "========================================="
          echo "üöÄ Final Configuration Summary"
          echo "========================================="
          echo "Action to perform: ${{ github.event.inputs.action }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Config file: ${{ vars.CDK_DEPLOY_ENVIRONMENT }}.json"
          echo "AWS Region: ${{ steps.cdk-config-setup.outputs.aws-region }}"
          echo "AWS Account: ${{ steps.cdk-config-setup.outputs.aws-account }}"
          echo "Working directory: $(pwd)"
          echo "Contents:"
          ls -la
          echo "========================================="

      - name: Run CDK Command
        working-directory: packages/infra
        run: |
          export CONFIG_FILE_NAME=${{ vars.CDK_DEPLOY_ENVIRONMENT }}.json
          echo "üéØ CONFIG_FILE_NAME set to: $CONFIG_FILE_NAME"

          if [ "${{ github.event.inputs.action }}" = "deploy" ]; then
            echo "üöÄ Starting CDK deployment..."
            echo "Command: pnpm exec cdk deploy --require-approval never"
            pnpm exec cdk deploy --require-approval never
            echo "‚úÖ CDK deployment completed successfully"
          else
            echo "üîç Running CDK diff..."
            echo "Command: pnpm exec cdk diff"
            pnpm exec cdk diff
            echo "‚úÖ CDK diff completed successfully"
          fi
